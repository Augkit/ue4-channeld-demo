// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Channeld.proto

#ifndef PROTOBUF_Channeld_2eproto__INCLUDED
#define PROTOBUF_Channeld_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Channeld_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[22];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPacketImpl();
void InitDefaultsPacket();
void InitDefaultsMessagePackImpl();
void InitDefaultsMessagePack();
void InitDefaultsServerForwardMessageImpl();
void InitDefaultsServerForwardMessage();
void InitDefaultsAuthMessageImpl();
void InitDefaultsAuthMessage();
void InitDefaultsAuthResultMessageImpl();
void InitDefaultsAuthResultMessage();
void InitDefaultsChannelSubscriptionOptionsImpl();
void InitDefaultsChannelSubscriptionOptions();
void InitDefaultsChannelDataMergeOptionsImpl();
void InitDefaultsChannelDataMergeOptions();
void InitDefaultsCreateChannelMessageImpl();
void InitDefaultsCreateChannelMessage();
void InitDefaultsCreateChannelResultMessageImpl();
void InitDefaultsCreateChannelResultMessage();
void InitDefaultsRemoveChannelMessageImpl();
void InitDefaultsRemoveChannelMessage();
void InitDefaultsListChannelMessageImpl();
void InitDefaultsListChannelMessage();
void InitDefaultsListChannelResultMessage_ChannelInfoImpl();
void InitDefaultsListChannelResultMessage_ChannelInfo();
void InitDefaultsListChannelResultMessageImpl();
void InitDefaultsListChannelResultMessage();
void InitDefaultsSubscribedToChannelMessageImpl();
void InitDefaultsSubscribedToChannelMessage();
void InitDefaultsSubscribedToChannelResultMessageImpl();
void InitDefaultsSubscribedToChannelResultMessage();
void InitDefaultsUnsubscribedFromChannelMessageImpl();
void InitDefaultsUnsubscribedFromChannelMessage();
void InitDefaultsChannelDataUpdateMessageImpl();
void InitDefaultsChannelDataUpdateMessage();
void InitDefaultsDisconnectMessageImpl();
void InitDefaultsDisconnectMessage();
void InitDefaultsLocationImpl();
void InitDefaultsLocation();
void InitDefaultsSpatialEntityInfoImpl();
void InitDefaultsSpatialEntityInfo();
void InitDefaultsSpatialChannelDataMessage_EntitiesEntry_DoNotUseImpl();
void InitDefaultsSpatialChannelDataMessage_EntitiesEntry_DoNotUse();
void InitDefaultsSpatialChannelDataMessageImpl();
void InitDefaultsSpatialChannelDataMessage();
inline void InitDefaults() {
  InitDefaultsPacket();
  InitDefaultsMessagePack();
  InitDefaultsServerForwardMessage();
  InitDefaultsAuthMessage();
  InitDefaultsAuthResultMessage();
  InitDefaultsChannelSubscriptionOptions();
  InitDefaultsChannelDataMergeOptions();
  InitDefaultsCreateChannelMessage();
  InitDefaultsCreateChannelResultMessage();
  InitDefaultsRemoveChannelMessage();
  InitDefaultsListChannelMessage();
  InitDefaultsListChannelResultMessage_ChannelInfo();
  InitDefaultsListChannelResultMessage();
  InitDefaultsSubscribedToChannelMessage();
  InitDefaultsSubscribedToChannelResultMessage();
  InitDefaultsUnsubscribedFromChannelMessage();
  InitDefaultsChannelDataUpdateMessage();
  InitDefaultsDisconnectMessage();
  InitDefaultsLocation();
  InitDefaultsSpatialEntityInfo();
  InitDefaultsSpatialChannelDataMessage_EntitiesEntry_DoNotUse();
  InitDefaultsSpatialChannelDataMessage();
}
}  // namespace protobuf_Channeld_2eproto
namespace channeld {
class AuthMessage;
class AuthMessageDefaultTypeInternal;
extern AuthMessageDefaultTypeInternal _AuthMessage_default_instance_;
class AuthResultMessage;
class AuthResultMessageDefaultTypeInternal;
extern AuthResultMessageDefaultTypeInternal _AuthResultMessage_default_instance_;
class ChannelDataMergeOptions;
class ChannelDataMergeOptionsDefaultTypeInternal;
extern ChannelDataMergeOptionsDefaultTypeInternal _ChannelDataMergeOptions_default_instance_;
class ChannelDataUpdateMessage;
class ChannelDataUpdateMessageDefaultTypeInternal;
extern ChannelDataUpdateMessageDefaultTypeInternal _ChannelDataUpdateMessage_default_instance_;
class ChannelSubscriptionOptions;
class ChannelSubscriptionOptionsDefaultTypeInternal;
extern ChannelSubscriptionOptionsDefaultTypeInternal _ChannelSubscriptionOptions_default_instance_;
class CreateChannelMessage;
class CreateChannelMessageDefaultTypeInternal;
extern CreateChannelMessageDefaultTypeInternal _CreateChannelMessage_default_instance_;
class CreateChannelResultMessage;
class CreateChannelResultMessageDefaultTypeInternal;
extern CreateChannelResultMessageDefaultTypeInternal _CreateChannelResultMessage_default_instance_;
class DisconnectMessage;
class DisconnectMessageDefaultTypeInternal;
extern DisconnectMessageDefaultTypeInternal _DisconnectMessage_default_instance_;
class ListChannelMessage;
class ListChannelMessageDefaultTypeInternal;
extern ListChannelMessageDefaultTypeInternal _ListChannelMessage_default_instance_;
class ListChannelResultMessage;
class ListChannelResultMessageDefaultTypeInternal;
extern ListChannelResultMessageDefaultTypeInternal _ListChannelResultMessage_default_instance_;
class ListChannelResultMessage_ChannelInfo;
class ListChannelResultMessage_ChannelInfoDefaultTypeInternal;
extern ListChannelResultMessage_ChannelInfoDefaultTypeInternal _ListChannelResultMessage_ChannelInfo_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class MessagePack;
class MessagePackDefaultTypeInternal;
extern MessagePackDefaultTypeInternal _MessagePack_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class RemoveChannelMessage;
class RemoveChannelMessageDefaultTypeInternal;
extern RemoveChannelMessageDefaultTypeInternal _RemoveChannelMessage_default_instance_;
class ServerForwardMessage;
class ServerForwardMessageDefaultTypeInternal;
extern ServerForwardMessageDefaultTypeInternal _ServerForwardMessage_default_instance_;
class SpatialChannelDataMessage;
class SpatialChannelDataMessageDefaultTypeInternal;
extern SpatialChannelDataMessageDefaultTypeInternal _SpatialChannelDataMessage_default_instance_;
class SpatialChannelDataMessage_EntitiesEntry_DoNotUse;
class SpatialChannelDataMessage_EntitiesEntry_DoNotUseDefaultTypeInternal;
extern SpatialChannelDataMessage_EntitiesEntry_DoNotUseDefaultTypeInternal _SpatialChannelDataMessage_EntitiesEntry_DoNotUse_default_instance_;
class SpatialEntityInfo;
class SpatialEntityInfoDefaultTypeInternal;
extern SpatialEntityInfoDefaultTypeInternal _SpatialEntityInfo_default_instance_;
class SubscribedToChannelMessage;
class SubscribedToChannelMessageDefaultTypeInternal;
extern SubscribedToChannelMessageDefaultTypeInternal _SubscribedToChannelMessage_default_instance_;
class SubscribedToChannelResultMessage;
class SubscribedToChannelResultMessageDefaultTypeInternal;
extern SubscribedToChannelResultMessageDefaultTypeInternal _SubscribedToChannelResultMessage_default_instance_;
class UnsubscribedFromChannelMessage;
class UnsubscribedFromChannelMessageDefaultTypeInternal;
extern UnsubscribedFromChannelMessageDefaultTypeInternal _UnsubscribedFromChannelMessage_default_instance_;
}  // namespace channeld
namespace channeld {

enum AuthResultMessage_AuthResult {
  AuthResultMessage_AuthResult_SUCCESSFUL = 0,
  AuthResultMessage_AuthResult_INVALID_PIT = 1,
  AuthResultMessage_AuthResult_INVALID_LT = 2,
  AuthResultMessage_AuthResult_AuthResultMessage_AuthResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AuthResultMessage_AuthResult_AuthResultMessage_AuthResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AuthResultMessage_AuthResult_IsValid(int value);
const AuthResultMessage_AuthResult AuthResultMessage_AuthResult_AuthResult_MIN = AuthResultMessage_AuthResult_SUCCESSFUL;
const AuthResultMessage_AuthResult AuthResultMessage_AuthResult_AuthResult_MAX = AuthResultMessage_AuthResult_INVALID_LT;
const int AuthResultMessage_AuthResult_AuthResult_ARRAYSIZE = AuthResultMessage_AuthResult_AuthResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuthResultMessage_AuthResult_descriptor();
inline const ::std::string& AuthResultMessage_AuthResult_Name(AuthResultMessage_AuthResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuthResultMessage_AuthResult_descriptor(), value);
}
inline bool AuthResultMessage_AuthResult_Parse(
    const ::std::string& name, AuthResultMessage_AuthResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuthResultMessage_AuthResult>(
    AuthResultMessage_AuthResult_descriptor(), name, value);
}
enum BroadcastType {
  NO_BROADCAST = 0,
  ALL = 1,
  ALL_BUT_SENDER = 2,
  SINGLE_CONNECTION = 3,
  BroadcastType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BroadcastType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BroadcastType_IsValid(int value);
const BroadcastType BroadcastType_MIN = NO_BROADCAST;
const BroadcastType BroadcastType_MAX = SINGLE_CONNECTION;
const int BroadcastType_ARRAYSIZE = BroadcastType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BroadcastType_descriptor();
inline const ::std::string& BroadcastType_Name(BroadcastType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BroadcastType_descriptor(), value);
}
inline bool BroadcastType_Parse(
    const ::std::string& name, BroadcastType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BroadcastType>(
    BroadcastType_descriptor(), name, value);
}
enum ChannelType {
  UNKNOWN = 0,
  GLOBAL = 1,
  PRIVATE = 2,
  SUBWORLD = 3,
  SPATIAL = 4,
  TEST = 100,
  TEST1 = 101,
  TEST2 = 102,
  TEST3 = 103,
  TEST4 = 104,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ChannelType_IsValid(int value);
const ChannelType ChannelType_MIN = UNKNOWN;
const ChannelType ChannelType_MAX = TEST4;
const int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelType_descriptor();
inline const ::std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelType_descriptor(), value);
}
inline bool ChannelType_Parse(
    const ::std::string& name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
enum MessageType {
  INVALID = 0,
  AUTH = 1,
  CREATE_CHANNEL = 3,
  REMOVE_CHANNEL = 4,
  LIST_CHANNEL = 5,
  SUB_TO_CHANNEL = 6,
  UNSUB_FROM_CHANNEL = 7,
  CHANNEL_DATA_UPDATE = 8,
  DISCONNECT = 9,
  USER_SPACE_START = 100,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = INVALID;
const MessageType MessageType_MAX = USER_SPACE_START;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum CompressionType {
  NO_COMPRESSION = 0,
  SNAPPY = 1,
  CompressionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CompressionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CompressionType_IsValid(int value);
const CompressionType CompressionType_MIN = NO_COMPRESSION;
const CompressionType CompressionType_MAX = SNAPPY;
const int CompressionType_ARRAYSIZE = CompressionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressionType_descriptor();
inline const ::std::string& CompressionType_Name(CompressionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressionType_descriptor(), value);
}
inline bool CompressionType_Parse(
    const ::std::string& name, CompressionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressionType>(
    CompressionType_descriptor(), name, value);
}
// ===================================================================

class Packet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Packet* other);
  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const PROTOBUF_FINAL { return New(NULL); }

  Packet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Packet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .channeld.MessagePack messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  const ::channeld::MessagePack& messages(int index) const;
  ::channeld::MessagePack* mutable_messages(int index);
  ::channeld::MessagePack* add_messages();
  ::google::protobuf::RepeatedPtrField< ::channeld::MessagePack >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::channeld::MessagePack >&
      messages() const;

  // @@protoc_insertion_point(class_scope:channeld.Packet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::channeld::MessagePack > messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsPacketImpl();
};
// -------------------------------------------------------------------

class MessagePack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.MessagePack) */ {
 public:
  MessagePack();
  virtual ~MessagePack();

  MessagePack(const MessagePack& from);

  inline MessagePack& operator=(const MessagePack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessagePack(MessagePack&& from) noexcept
    : MessagePack() {
    *this = ::std::move(from);
  }

  inline MessagePack& operator=(MessagePack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessagePack* internal_default_instance() {
    return reinterpret_cast<const MessagePack*>(
               &_MessagePack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MessagePack* other);
  friend void swap(MessagePack& a, MessagePack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessagePack* New() const PROTOBUF_FINAL { return New(NULL); }

  MessagePack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessagePack& from);
  void MergeFrom(const MessagePack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessagePack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes msgBody = 5;
  void clear_msgbody();
  static const int kMsgBodyFieldNumber = 5;
  const ::std::string& msgbody() const;
  void set_msgbody(const ::std::string& value);
  #if LANG_CXX11
  void set_msgbody(::std::string&& value);
  #endif
  void set_msgbody(const char* value);
  void set_msgbody(const void* value, size_t size);
  ::std::string* mutable_msgbody();
  ::std::string* release_msgbody();
  void set_allocated_msgbody(::std::string* msgbody);

  // uint32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // .channeld.BroadcastType broadcast = 2;
  void clear_broadcast();
  static const int kBroadcastFieldNumber = 2;
  ::channeld::BroadcastType broadcast() const;
  void set_broadcast(::channeld::BroadcastType value);

  // uint32 stubId = 3;
  void clear_stubid();
  static const int kStubIdFieldNumber = 3;
  ::google::protobuf::uint32 stubid() const;
  void set_stubid(::google::protobuf::uint32 value);

  // uint32 msgType = 4;
  void clear_msgtype();
  static const int kMsgTypeFieldNumber = 4;
  ::google::protobuf::uint32 msgtype() const;
  void set_msgtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.MessagePack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msgbody_;
  ::google::protobuf::uint32 channelid_;
  int broadcast_;
  ::google::protobuf::uint32 stubid_;
  ::google::protobuf::uint32 msgtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsMessagePackImpl();
};
// -------------------------------------------------------------------

class ServerForwardMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.ServerForwardMessage) */ {
 public:
  ServerForwardMessage();
  virtual ~ServerForwardMessage();

  ServerForwardMessage(const ServerForwardMessage& from);

  inline ServerForwardMessage& operator=(const ServerForwardMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerForwardMessage(ServerForwardMessage&& from) noexcept
    : ServerForwardMessage() {
    *this = ::std::move(from);
  }

  inline ServerForwardMessage& operator=(ServerForwardMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerForwardMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerForwardMessage* internal_default_instance() {
    return reinterpret_cast<const ServerForwardMessage*>(
               &_ServerForwardMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ServerForwardMessage* other);
  friend void swap(ServerForwardMessage& a, ServerForwardMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerForwardMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerForwardMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerForwardMessage& from);
  void MergeFrom(const ServerForwardMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerForwardMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 2;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint32 clientConnId = 1;
  void clear_clientconnid();
  static const int kClientConnIdFieldNumber = 1;
  ::google::protobuf::uint32 clientconnid() const;
  void set_clientconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.ServerForwardMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint32 clientconnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsServerForwardMessageImpl();
};
// -------------------------------------------------------------------

class AuthMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.AuthMessage) */ {
 public:
  AuthMessage();
  virtual ~AuthMessage();

  AuthMessage(const AuthMessage& from);

  inline AuthMessage& operator=(const AuthMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthMessage(AuthMessage&& from) noexcept
    : AuthMessage() {
    *this = ::std::move(from);
  }

  inline AuthMessage& operator=(AuthMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthMessage* internal_default_instance() {
    return reinterpret_cast<const AuthMessage*>(
               &_AuthMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AuthMessage* other);
  friend void swap(AuthMessage& a, AuthMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthMessage& from);
  void MergeFrom(const AuthMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string playerIdentifierToken = 1;
  void clear_playeridentifiertoken();
  static const int kPlayerIdentifierTokenFieldNumber = 1;
  const ::std::string& playeridentifiertoken() const;
  void set_playeridentifiertoken(const ::std::string& value);
  #if LANG_CXX11
  void set_playeridentifiertoken(::std::string&& value);
  #endif
  void set_playeridentifiertoken(const char* value);
  void set_playeridentifiertoken(const char* value, size_t size);
  ::std::string* mutable_playeridentifiertoken();
  ::std::string* release_playeridentifiertoken();
  void set_allocated_playeridentifiertoken(::std::string* playeridentifiertoken);

  // string loginToken = 2;
  void clear_logintoken();
  static const int kLoginTokenFieldNumber = 2;
  const ::std::string& logintoken() const;
  void set_logintoken(const ::std::string& value);
  #if LANG_CXX11
  void set_logintoken(::std::string&& value);
  #endif
  void set_logintoken(const char* value);
  void set_logintoken(const char* value, size_t size);
  ::std::string* mutable_logintoken();
  ::std::string* release_logintoken();
  void set_allocated_logintoken(::std::string* logintoken);

  // @@protoc_insertion_point(class_scope:channeld.AuthMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playeridentifiertoken_;
  ::google::protobuf::internal::ArenaStringPtr logintoken_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsAuthMessageImpl();
};
// -------------------------------------------------------------------

class AuthResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.AuthResultMessage) */ {
 public:
  AuthResultMessage();
  virtual ~AuthResultMessage();

  AuthResultMessage(const AuthResultMessage& from);

  inline AuthResultMessage& operator=(const AuthResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthResultMessage(AuthResultMessage&& from) noexcept
    : AuthResultMessage() {
    *this = ::std::move(from);
  }

  inline AuthResultMessage& operator=(AuthResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AuthResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthResultMessage* internal_default_instance() {
    return reinterpret_cast<const AuthResultMessage*>(
               &_AuthResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(AuthResultMessage* other);
  friend void swap(AuthResultMessage& a, AuthResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AuthResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AuthResultMessage& from);
  void MergeFrom(const AuthResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AuthResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AuthResultMessage_AuthResult AuthResult;
  static const AuthResult SUCCESSFUL =
    AuthResultMessage_AuthResult_SUCCESSFUL;
  static const AuthResult INVALID_PIT =
    AuthResultMessage_AuthResult_INVALID_PIT;
  static const AuthResult INVALID_LT =
    AuthResultMessage_AuthResult_INVALID_LT;
  static inline bool AuthResult_IsValid(int value) {
    return AuthResultMessage_AuthResult_IsValid(value);
  }
  static const AuthResult AuthResult_MIN =
    AuthResultMessage_AuthResult_AuthResult_MIN;
  static const AuthResult AuthResult_MAX =
    AuthResultMessage_AuthResult_AuthResult_MAX;
  static const int AuthResult_ARRAYSIZE =
    AuthResultMessage_AuthResult_AuthResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AuthResult_descriptor() {
    return AuthResultMessage_AuthResult_descriptor();
  }
  static inline const ::std::string& AuthResult_Name(AuthResult value) {
    return AuthResultMessage_AuthResult_Name(value);
  }
  static inline bool AuthResult_Parse(const ::std::string& name,
      AuthResult* value) {
    return AuthResultMessage_AuthResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .channeld.AuthResultMessage.AuthResult result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::channeld::AuthResultMessage_AuthResult result() const;
  void set_result(::channeld::AuthResultMessage_AuthResult value);

  // uint32 connId = 2;
  void clear_connid();
  static const int kConnIdFieldNumber = 2;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // .channeld.CompressionType compressionType = 3;
  void clear_compressiontype();
  static const int kCompressionTypeFieldNumber = 3;
  ::channeld::CompressionType compressiontype() const;
  void set_compressiontype(::channeld::CompressionType value);

  // @@protoc_insertion_point(class_scope:channeld.AuthResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int result_;
  ::google::protobuf::uint32 connid_;
  int compressiontype_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsAuthResultMessageImpl();
};
// -------------------------------------------------------------------

class ChannelSubscriptionOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.ChannelSubscriptionOptions) */ {
 public:
  ChannelSubscriptionOptions();
  virtual ~ChannelSubscriptionOptions();

  ChannelSubscriptionOptions(const ChannelSubscriptionOptions& from);

  inline ChannelSubscriptionOptions& operator=(const ChannelSubscriptionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelSubscriptionOptions(ChannelSubscriptionOptions&& from) noexcept
    : ChannelSubscriptionOptions() {
    *this = ::std::move(from);
  }

  inline ChannelSubscriptionOptions& operator=(ChannelSubscriptionOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelSubscriptionOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelSubscriptionOptions* internal_default_instance() {
    return reinterpret_cast<const ChannelSubscriptionOptions*>(
               &_ChannelSubscriptionOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ChannelSubscriptionOptions* other);
  friend void swap(ChannelSubscriptionOptions& a, ChannelSubscriptionOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelSubscriptionOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelSubscriptionOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelSubscriptionOptions& from);
  void MergeFrom(const ChannelSubscriptionOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelSubscriptionOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string DataFieldMasks = 2;
  int datafieldmasks_size() const;
  void clear_datafieldmasks();
  static const int kDataFieldMasksFieldNumber = 2;
  const ::std::string& datafieldmasks(int index) const;
  ::std::string* mutable_datafieldmasks(int index);
  void set_datafieldmasks(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_datafieldmasks(int index, ::std::string&& value);
  #endif
  void set_datafieldmasks(int index, const char* value);
  void set_datafieldmasks(int index, const char* value, size_t size);
  ::std::string* add_datafieldmasks();
  void add_datafieldmasks(const ::std::string& value);
  #if LANG_CXX11
  void add_datafieldmasks(::std::string&& value);
  #endif
  void add_datafieldmasks(const char* value);
  void add_datafieldmasks(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& datafieldmasks() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_datafieldmasks();

  // bool CanUpdateData = 1;
  void clear_canupdatedata();
  static const int kCanUpdateDataFieldNumber = 1;
  bool canupdatedata() const;
  void set_canupdatedata(bool value);

  // uint32 FanOutIntervalMs = 3;
  void clear_fanoutintervalms();
  static const int kFanOutIntervalMsFieldNumber = 3;
  ::google::protobuf::uint32 fanoutintervalms() const;
  void set_fanoutintervalms(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.ChannelSubscriptionOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> datafieldmasks_;
  bool canupdatedata_;
  ::google::protobuf::uint32 fanoutintervalms_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsChannelSubscriptionOptionsImpl();
};
// -------------------------------------------------------------------

class ChannelDataMergeOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.ChannelDataMergeOptions) */ {
 public:
  ChannelDataMergeOptions();
  virtual ~ChannelDataMergeOptions();

  ChannelDataMergeOptions(const ChannelDataMergeOptions& from);

  inline ChannelDataMergeOptions& operator=(const ChannelDataMergeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelDataMergeOptions(ChannelDataMergeOptions&& from) noexcept
    : ChannelDataMergeOptions() {
    *this = ::std::move(from);
  }

  inline ChannelDataMergeOptions& operator=(ChannelDataMergeOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDataMergeOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelDataMergeOptions* internal_default_instance() {
    return reinterpret_cast<const ChannelDataMergeOptions*>(
               &_ChannelDataMergeOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ChannelDataMergeOptions* other);
  friend void swap(ChannelDataMergeOptions& a, ChannelDataMergeOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelDataMergeOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelDataMergeOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelDataMergeOptions& from);
  void MergeFrom(const ChannelDataMergeOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelDataMergeOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 listSizeLimit = 2;
  void clear_listsizelimit();
  static const int kListSizeLimitFieldNumber = 2;
  ::google::protobuf::uint32 listsizelimit() const;
  void set_listsizelimit(::google::protobuf::uint32 value);

  // bool shouldReplaceList = 1;
  void clear_shouldreplacelist();
  static const int kShouldReplaceListFieldNumber = 1;
  bool shouldreplacelist() const;
  void set_shouldreplacelist(bool value);

  // bool truncateTop = 3;
  void clear_truncatetop();
  static const int kTruncateTopFieldNumber = 3;
  bool truncatetop() const;
  void set_truncatetop(bool value);

  // bool shouldCheckRemovableMapField = 4;
  void clear_shouldcheckremovablemapfield();
  static const int kShouldCheckRemovableMapFieldFieldNumber = 4;
  bool shouldcheckremovablemapfield() const;
  void set_shouldcheckremovablemapfield(bool value);

  // @@protoc_insertion_point(class_scope:channeld.ChannelDataMergeOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 listsizelimit_;
  bool shouldreplacelist_;
  bool truncatetop_;
  bool shouldcheckremovablemapfield_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsChannelDataMergeOptionsImpl();
};
// -------------------------------------------------------------------

class CreateChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.CreateChannelMessage) */ {
 public:
  CreateChannelMessage();
  virtual ~CreateChannelMessage();

  CreateChannelMessage(const CreateChannelMessage& from);

  inline CreateChannelMessage& operator=(const CreateChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateChannelMessage(CreateChannelMessage&& from) noexcept
    : CreateChannelMessage() {
    *this = ::std::move(from);
  }

  inline CreateChannelMessage& operator=(CreateChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChannelMessage* internal_default_instance() {
    return reinterpret_cast<const CreateChannelMessage*>(
               &_CreateChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CreateChannelMessage* other);
  friend void swap(CreateChannelMessage& a, CreateChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateChannelMessage& from);
  void MergeFrom(const CreateChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metadata = 2;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // .channeld.ChannelSubscriptionOptions subOptions = 3;
  bool has_suboptions() const;
  void clear_suboptions();
  static const int kSubOptionsFieldNumber = 3;
  const ::channeld::ChannelSubscriptionOptions& suboptions() const;
  ::channeld::ChannelSubscriptionOptions* release_suboptions();
  ::channeld::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeld::ChannelSubscriptionOptions* suboptions);

  // .google.protobuf.Any data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // .channeld.ChannelDataMergeOptions mergeOptions = 5;
  bool has_mergeoptions() const;
  void clear_mergeoptions();
  static const int kMergeOptionsFieldNumber = 5;
  const ::channeld::ChannelDataMergeOptions& mergeoptions() const;
  ::channeld::ChannelDataMergeOptions* release_mergeoptions();
  ::channeld::ChannelDataMergeOptions* mutable_mergeoptions();
  void set_allocated_mergeoptions(::channeld::ChannelDataMergeOptions* mergeoptions);

  // .channeld.ChannelType channelType = 1;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 1;
  ::channeld::ChannelType channeltype() const;
  void set_channeltype(::channeld::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeld.CreateChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::channeld::ChannelSubscriptionOptions* suboptions_;
  ::google::protobuf::Any* data_;
  ::channeld::ChannelDataMergeOptions* mergeoptions_;
  int channeltype_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsCreateChannelMessageImpl();
};
// -------------------------------------------------------------------

class CreateChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.CreateChannelResultMessage) */ {
 public:
  CreateChannelResultMessage();
  virtual ~CreateChannelResultMessage();

  CreateChannelResultMessage(const CreateChannelResultMessage& from);

  inline CreateChannelResultMessage& operator=(const CreateChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateChannelResultMessage(CreateChannelResultMessage&& from) noexcept
    : CreateChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline CreateChannelResultMessage& operator=(CreateChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const CreateChannelResultMessage*>(
               &_CreateChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CreateChannelResultMessage* other);
  friend void swap(CreateChannelResultMessage& a, CreateChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateChannelResultMessage& from);
  void MergeFrom(const CreateChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metadata = 2;
  void clear_metadata();
  static const int kMetadataFieldNumber = 2;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // .channeld.ChannelType channelType = 1;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 1;
  ::channeld::ChannelType channeltype() const;
  void set_channeltype(::channeld::ChannelType value);

  // uint32 ownerConnId = 3;
  void clear_ownerconnid();
  static const int kOwnerConnIdFieldNumber = 3;
  ::google::protobuf::uint32 ownerconnid() const;
  void set_ownerconnid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.CreateChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  int channeltype_;
  ::google::protobuf::uint32 ownerconnid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsCreateChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class RemoveChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.RemoveChannelMessage) */ {
 public:
  RemoveChannelMessage();
  virtual ~RemoveChannelMessage();

  RemoveChannelMessage(const RemoveChannelMessage& from);

  inline RemoveChannelMessage& operator=(const RemoveChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveChannelMessage(RemoveChannelMessage&& from) noexcept
    : RemoveChannelMessage() {
    *this = ::std::move(from);
  }

  inline RemoveChannelMessage& operator=(RemoveChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveChannelMessage* internal_default_instance() {
    return reinterpret_cast<const RemoveChannelMessage*>(
               &_RemoveChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(RemoveChannelMessage* other);
  friend void swap(RemoveChannelMessage& a, RemoveChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveChannelMessage& from);
  void MergeFrom(const RemoveChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.RemoveChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 channelid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsRemoveChannelMessageImpl();
};
// -------------------------------------------------------------------

class ListChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.ListChannelMessage) */ {
 public:
  ListChannelMessage();
  virtual ~ListChannelMessage();

  ListChannelMessage(const ListChannelMessage& from);

  inline ListChannelMessage& operator=(const ListChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListChannelMessage(ListChannelMessage&& from) noexcept
    : ListChannelMessage() {
    *this = ::std::move(from);
  }

  inline ListChannelMessage& operator=(ListChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ListChannelMessage*>(
               &_ListChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ListChannelMessage* other);
  friend void swap(ListChannelMessage& a, ListChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ListChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListChannelMessage& from);
  void MergeFrom(const ListChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string metadataFilters = 2;
  int metadatafilters_size() const;
  void clear_metadatafilters();
  static const int kMetadataFiltersFieldNumber = 2;
  const ::std::string& metadatafilters(int index) const;
  ::std::string* mutable_metadatafilters(int index);
  void set_metadatafilters(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_metadatafilters(int index, ::std::string&& value);
  #endif
  void set_metadatafilters(int index, const char* value);
  void set_metadatafilters(int index, const char* value, size_t size);
  ::std::string* add_metadatafilters();
  void add_metadatafilters(const ::std::string& value);
  #if LANG_CXX11
  void add_metadatafilters(::std::string&& value);
  #endif
  void add_metadatafilters(const char* value);
  void add_metadatafilters(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& metadatafilters() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_metadatafilters();

  // .channeld.ChannelType typeFilter = 1;
  void clear_typefilter();
  static const int kTypeFilterFieldNumber = 1;
  ::channeld::ChannelType typefilter() const;
  void set_typefilter(::channeld::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeld.ListChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> metadatafilters_;
  int typefilter_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsListChannelMessageImpl();
};
// -------------------------------------------------------------------

class ListChannelResultMessage_ChannelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.ListChannelResultMessage.ChannelInfo) */ {
 public:
  ListChannelResultMessage_ChannelInfo();
  virtual ~ListChannelResultMessage_ChannelInfo();

  ListChannelResultMessage_ChannelInfo(const ListChannelResultMessage_ChannelInfo& from);

  inline ListChannelResultMessage_ChannelInfo& operator=(const ListChannelResultMessage_ChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListChannelResultMessage_ChannelInfo(ListChannelResultMessage_ChannelInfo&& from) noexcept
    : ListChannelResultMessage_ChannelInfo() {
    *this = ::std::move(from);
  }

  inline ListChannelResultMessage_ChannelInfo& operator=(ListChannelResultMessage_ChannelInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChannelResultMessage_ChannelInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelResultMessage_ChannelInfo* internal_default_instance() {
    return reinterpret_cast<const ListChannelResultMessage_ChannelInfo*>(
               &_ListChannelResultMessage_ChannelInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ListChannelResultMessage_ChannelInfo* other);
  friend void swap(ListChannelResultMessage_ChannelInfo& a, ListChannelResultMessage_ChannelInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListChannelResultMessage_ChannelInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ListChannelResultMessage_ChannelInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListChannelResultMessage_ChannelInfo& from);
  void MergeFrom(const ListChannelResultMessage_ChannelInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListChannelResultMessage_ChannelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string metadata = 3;
  void clear_metadata();
  static const int kMetadataFieldNumber = 3;
  const ::std::string& metadata() const;
  void set_metadata(const ::std::string& value);
  #if LANG_CXX11
  void set_metadata(::std::string&& value);
  #endif
  void set_metadata(const char* value);
  void set_metadata(const char* value, size_t size);
  ::std::string* mutable_metadata();
  ::std::string* release_metadata();
  void set_allocated_metadata(::std::string* metadata);

  // uint32 channelId = 1;
  void clear_channelid();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::uint32 channelid() const;
  void set_channelid(::google::protobuf::uint32 value);

  // .channeld.ChannelType channelType = 2;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 2;
  ::channeld::ChannelType channeltype() const;
  void set_channeltype(::channeld::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeld.ListChannelResultMessage.ChannelInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr metadata_;
  ::google::protobuf::uint32 channelid_;
  int channeltype_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsListChannelResultMessage_ChannelInfoImpl();
};
// -------------------------------------------------------------------

class ListChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.ListChannelResultMessage) */ {
 public:
  ListChannelResultMessage();
  virtual ~ListChannelResultMessage();

  ListChannelResultMessage(const ListChannelResultMessage& from);

  inline ListChannelResultMessage& operator=(const ListChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListChannelResultMessage(ListChannelResultMessage&& from) noexcept
    : ListChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline ListChannelResultMessage& operator=(ListChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const ListChannelResultMessage*>(
               &_ListChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ListChannelResultMessage* other);
  friend void swap(ListChannelResultMessage& a, ListChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ListChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListChannelResultMessage& from);
  void MergeFrom(const ListChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ListChannelResultMessage_ChannelInfo ChannelInfo;

  // accessors -------------------------------------------------------

  // repeated .channeld.ListChannelResultMessage.ChannelInfo channels = 1;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 1;
  const ::channeld::ListChannelResultMessage_ChannelInfo& channels(int index) const;
  ::channeld::ListChannelResultMessage_ChannelInfo* mutable_channels(int index);
  ::channeld::ListChannelResultMessage_ChannelInfo* add_channels();
  ::google::protobuf::RepeatedPtrField< ::channeld::ListChannelResultMessage_ChannelInfo >*
      mutable_channels();
  const ::google::protobuf::RepeatedPtrField< ::channeld::ListChannelResultMessage_ChannelInfo >&
      channels() const;

  // @@protoc_insertion_point(class_scope:channeld.ListChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::channeld::ListChannelResultMessage_ChannelInfo > channels_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsListChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class SubscribedToChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.SubscribedToChannelMessage) */ {
 public:
  SubscribedToChannelMessage();
  virtual ~SubscribedToChannelMessage();

  SubscribedToChannelMessage(const SubscribedToChannelMessage& from);

  inline SubscribedToChannelMessage& operator=(const SubscribedToChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribedToChannelMessage(SubscribedToChannelMessage&& from) noexcept
    : SubscribedToChannelMessage() {
    *this = ::std::move(from);
  }

  inline SubscribedToChannelMessage& operator=(SubscribedToChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribedToChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribedToChannelMessage* internal_default_instance() {
    return reinterpret_cast<const SubscribedToChannelMessage*>(
               &_SubscribedToChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(SubscribedToChannelMessage* other);
  friend void swap(SubscribedToChannelMessage& a, SubscribedToChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribedToChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribedToChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribedToChannelMessage& from);
  void MergeFrom(const SubscribedToChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribedToChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .channeld.ChannelSubscriptionOptions subOptions = 2;
  bool has_suboptions() const;
  void clear_suboptions();
  static const int kSubOptionsFieldNumber = 2;
  const ::channeld::ChannelSubscriptionOptions& suboptions() const;
  ::channeld::ChannelSubscriptionOptions* release_suboptions();
  ::channeld::ChannelSubscriptionOptions* mutable_suboptions();
  void set_allocated_suboptions(::channeld::ChannelSubscriptionOptions* suboptions);

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.SubscribedToChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::channeld::ChannelSubscriptionOptions* suboptions_;
  ::google::protobuf::uint32 connid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsSubscribedToChannelMessageImpl();
};
// -------------------------------------------------------------------

class SubscribedToChannelResultMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.SubscribedToChannelResultMessage) */ {
 public:
  SubscribedToChannelResultMessage();
  virtual ~SubscribedToChannelResultMessage();

  SubscribedToChannelResultMessage(const SubscribedToChannelResultMessage& from);

  inline SubscribedToChannelResultMessage& operator=(const SubscribedToChannelResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubscribedToChannelResultMessage(SubscribedToChannelResultMessage&& from) noexcept
    : SubscribedToChannelResultMessage() {
    *this = ::std::move(from);
  }

  inline SubscribedToChannelResultMessage& operator=(SubscribedToChannelResultMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribedToChannelResultMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribedToChannelResultMessage* internal_default_instance() {
    return reinterpret_cast<const SubscribedToChannelResultMessage*>(
               &_SubscribedToChannelResultMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(SubscribedToChannelResultMessage* other);
  friend void swap(SubscribedToChannelResultMessage& a, SubscribedToChannelResultMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubscribedToChannelResultMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SubscribedToChannelResultMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubscribedToChannelResultMessage& from);
  void MergeFrom(const SubscribedToChannelResultMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubscribedToChannelResultMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // .channeld.ChannelType channelType = 2;
  void clear_channeltype();
  static const int kChannelTypeFieldNumber = 2;
  ::channeld::ChannelType channeltype() const;
  void set_channeltype(::channeld::ChannelType value);

  // @@protoc_insertion_point(class_scope:channeld.SubscribedToChannelResultMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 connid_;
  int channeltype_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsSubscribedToChannelResultMessageImpl();
};
// -------------------------------------------------------------------

class UnsubscribedFromChannelMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.UnsubscribedFromChannelMessage) */ {
 public:
  UnsubscribedFromChannelMessage();
  virtual ~UnsubscribedFromChannelMessage();

  UnsubscribedFromChannelMessage(const UnsubscribedFromChannelMessage& from);

  inline UnsubscribedFromChannelMessage& operator=(const UnsubscribedFromChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UnsubscribedFromChannelMessage(UnsubscribedFromChannelMessage&& from) noexcept
    : UnsubscribedFromChannelMessage() {
    *this = ::std::move(from);
  }

  inline UnsubscribedFromChannelMessage& operator=(UnsubscribedFromChannelMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UnsubscribedFromChannelMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribedFromChannelMessage* internal_default_instance() {
    return reinterpret_cast<const UnsubscribedFromChannelMessage*>(
               &_UnsubscribedFromChannelMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UnsubscribedFromChannelMessage* other);
  friend void swap(UnsubscribedFromChannelMessage& a, UnsubscribedFromChannelMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribedFromChannelMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  UnsubscribedFromChannelMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UnsubscribedFromChannelMessage& from);
  void MergeFrom(const UnsubscribedFromChannelMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UnsubscribedFromChannelMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.UnsubscribedFromChannelMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 connid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsUnsubscribedFromChannelMessageImpl();
};
// -------------------------------------------------------------------

class ChannelDataUpdateMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.ChannelDataUpdateMessage) */ {
 public:
  ChannelDataUpdateMessage();
  virtual ~ChannelDataUpdateMessage();

  ChannelDataUpdateMessage(const ChannelDataUpdateMessage& from);

  inline ChannelDataUpdateMessage& operator=(const ChannelDataUpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChannelDataUpdateMessage(ChannelDataUpdateMessage&& from) noexcept
    : ChannelDataUpdateMessage() {
    *this = ::std::move(from);
  }

  inline ChannelDataUpdateMessage& operator=(ChannelDataUpdateMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelDataUpdateMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelDataUpdateMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelDataUpdateMessage*>(
               &_ChannelDataUpdateMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ChannelDataUpdateMessage* other);
  friend void swap(ChannelDataUpdateMessage& a, ChannelDataUpdateMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChannelDataUpdateMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelDataUpdateMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelDataUpdateMessage& from);
  void MergeFrom(const ChannelDataUpdateMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelDataUpdateMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::google::protobuf::Any& data() const;
  ::google::protobuf::Any* release_data();
  ::google::protobuf::Any* mutable_data();
  void set_allocated_data(::google::protobuf::Any* data);

  // @@protoc_insertion_point(class_scope:channeld.ChannelDataUpdateMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* data_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsChannelDataUpdateMessageImpl();
};
// -------------------------------------------------------------------

class DisconnectMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.DisconnectMessage) */ {
 public:
  DisconnectMessage();
  virtual ~DisconnectMessage();

  DisconnectMessage(const DisconnectMessage& from);

  inline DisconnectMessage& operator=(const DisconnectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisconnectMessage(DisconnectMessage&& from) noexcept
    : DisconnectMessage() {
    *this = ::std::move(from);
  }

  inline DisconnectMessage& operator=(DisconnectMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DisconnectMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectMessage* internal_default_instance() {
    return reinterpret_cast<const DisconnectMessage*>(
               &_DisconnectMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(DisconnectMessage* other);
  friend void swap(DisconnectMessage& a, DisconnectMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisconnectMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  DisconnectMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DisconnectMessage& from);
  void MergeFrom(const DisconnectMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DisconnectMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 connId = 1;
  void clear_connid();
  static const int kConnIdFieldNumber = 1;
  ::google::protobuf::uint32 connid() const;
  void set_connid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:channeld.DisconnectMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 connid_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsDisconnectMessageImpl();
};
// -------------------------------------------------------------------

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Location* other);
  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  double z() const;
  void set_z(double value);

  // @@protoc_insertion_point(class_scope:channeld.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsLocationImpl();
};
// -------------------------------------------------------------------

class SpatialEntityInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.SpatialEntityInfo) */ {
 public:
  SpatialEntityInfo();
  virtual ~SpatialEntityInfo();

  SpatialEntityInfo(const SpatialEntityInfo& from);

  inline SpatialEntityInfo& operator=(const SpatialEntityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpatialEntityInfo(SpatialEntityInfo&& from) noexcept
    : SpatialEntityInfo() {
    *this = ::std::move(from);
  }

  inline SpatialEntityInfo& operator=(SpatialEntityInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialEntityInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialEntityInfo* internal_default_instance() {
    return reinterpret_cast<const SpatialEntityInfo*>(
               &_SpatialEntityInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(SpatialEntityInfo* other);
  friend void swap(SpatialEntityInfo& a, SpatialEntityInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialEntityInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  SpatialEntityInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpatialEntityInfo& from);
  void MergeFrom(const SpatialEntityInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpatialEntityInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .channeld.Location loc = 1;
  bool has_loc() const;
  void clear_loc();
  static const int kLocFieldNumber = 1;
  const ::channeld::Location& loc() const;
  ::channeld::Location* release_loc();
  ::channeld::Location* mutable_loc();
  void set_allocated_loc(::channeld::Location* loc);

  // @@protoc_insertion_point(class_scope:channeld.SpatialEntityInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::channeld::Location* loc_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsSpatialEntityInfoImpl();
};
// -------------------------------------------------------------------

class SpatialChannelDataMessage_EntitiesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SpatialChannelDataMessage_EntitiesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::channeld::SpatialEntityInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SpatialChannelDataMessage_EntitiesEntry_DoNotUse, 
    ::google::protobuf::uint32, ::channeld::SpatialEntityInfo,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  SpatialChannelDataMessage_EntitiesEntry_DoNotUse();
  SpatialChannelDataMessage_EntitiesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SpatialChannelDataMessage_EntitiesEntry_DoNotUse& other);
  static const SpatialChannelDataMessage_EntitiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SpatialChannelDataMessage_EntitiesEntry_DoNotUse*>(&_SpatialChannelDataMessage_EntitiesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SpatialChannelDataMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:channeld.SpatialChannelDataMessage) */ {
 public:
  SpatialChannelDataMessage();
  virtual ~SpatialChannelDataMessage();

  SpatialChannelDataMessage(const SpatialChannelDataMessage& from);

  inline SpatialChannelDataMessage& operator=(const SpatialChannelDataMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpatialChannelDataMessage(SpatialChannelDataMessage&& from) noexcept
    : SpatialChannelDataMessage() {
    *this = ::std::move(from);
  }

  inline SpatialChannelDataMessage& operator=(SpatialChannelDataMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpatialChannelDataMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpatialChannelDataMessage* internal_default_instance() {
    return reinterpret_cast<const SpatialChannelDataMessage*>(
               &_SpatialChannelDataMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(SpatialChannelDataMessage* other);
  friend void swap(SpatialChannelDataMessage& a, SpatialChannelDataMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpatialChannelDataMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  SpatialChannelDataMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpatialChannelDataMessage& from);
  void MergeFrom(const SpatialChannelDataMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpatialChannelDataMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .channeld.SpatialEntityInfo> entities = 1;
  int entities_size() const;
  void clear_entities();
  static const int kEntitiesFieldNumber = 1;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::channeld::SpatialEntityInfo >&
      entities() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::channeld::SpatialEntityInfo >*
      mutable_entities();

  // @@protoc_insertion_point(class_scope:channeld.SpatialChannelDataMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SpatialChannelDataMessage_EntitiesEntry_DoNotUse,
      ::google::protobuf::uint32, ::channeld::SpatialEntityInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > entities_;
  mutable int _cached_size_;
  friend struct ::protobuf_Channeld_2eproto::TableStruct;
  friend void ::protobuf_Channeld_2eproto::InitDefaultsSpatialChannelDataMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Packet

// repeated .channeld.MessagePack messages = 1;
inline int Packet::messages_size() const {
  return messages_.size();
}
inline void Packet::clear_messages() {
  messages_.Clear();
}
inline const ::channeld::MessagePack& Packet::messages(int index) const {
  // @@protoc_insertion_point(field_get:channeld.Packet.messages)
  return messages_.Get(index);
}
inline ::channeld::MessagePack* Packet::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:channeld.Packet.messages)
  return messages_.Mutable(index);
}
inline ::channeld::MessagePack* Packet::add_messages() {
  // @@protoc_insertion_point(field_add:channeld.Packet.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channeld::MessagePack >*
Packet::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:channeld.Packet.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channeld::MessagePack >&
Packet::messages() const {
  // @@protoc_insertion_point(field_list:channeld.Packet.messages)
  return messages_;
}

// -------------------------------------------------------------------

// MessagePack

// uint32 channelId = 1;
inline void MessagePack::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::channelid() const {
  // @@protoc_insertion_point(field_get:channeld.MessagePack.channelId)
  return channelid_;
}
inline void MessagePack::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeld.MessagePack.channelId)
}

// .channeld.BroadcastType broadcast = 2;
inline void MessagePack::clear_broadcast() {
  broadcast_ = 0;
}
inline ::channeld::BroadcastType MessagePack::broadcast() const {
  // @@protoc_insertion_point(field_get:channeld.MessagePack.broadcast)
  return static_cast< ::channeld::BroadcastType >(broadcast_);
}
inline void MessagePack::set_broadcast(::channeld::BroadcastType value) {
  
  broadcast_ = value;
  // @@protoc_insertion_point(field_set:channeld.MessagePack.broadcast)
}

// uint32 stubId = 3;
inline void MessagePack::clear_stubid() {
  stubid_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::stubid() const {
  // @@protoc_insertion_point(field_get:channeld.MessagePack.stubId)
  return stubid_;
}
inline void MessagePack::set_stubid(::google::protobuf::uint32 value) {
  
  stubid_ = value;
  // @@protoc_insertion_point(field_set:channeld.MessagePack.stubId)
}

// uint32 msgType = 4;
inline void MessagePack::clear_msgtype() {
  msgtype_ = 0u;
}
inline ::google::protobuf::uint32 MessagePack::msgtype() const {
  // @@protoc_insertion_point(field_get:channeld.MessagePack.msgType)
  return msgtype_;
}
inline void MessagePack::set_msgtype(::google::protobuf::uint32 value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:channeld.MessagePack.msgType)
}

// bytes msgBody = 5;
inline void MessagePack::clear_msgbody() {
  msgbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessagePack::msgbody() const {
  // @@protoc_insertion_point(field_get:channeld.MessagePack.msgBody)
  return msgbody_.GetNoArena();
}
inline void MessagePack::set_msgbody(const ::std::string& value) {
  
  msgbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeld.MessagePack.msgBody)
}
#if LANG_CXX11
inline void MessagePack::set_msgbody(::std::string&& value) {
  
  msgbody_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeld.MessagePack.msgBody)
}
#endif
inline void MessagePack::set_msgbody(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msgbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeld.MessagePack.msgBody)
}
inline void MessagePack::set_msgbody(const void* value, size_t size) {
  
  msgbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeld.MessagePack.msgBody)
}
inline ::std::string* MessagePack::mutable_msgbody() {
  
  // @@protoc_insertion_point(field_mutable:channeld.MessagePack.msgBody)
  return msgbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessagePack::release_msgbody() {
  // @@protoc_insertion_point(field_release:channeld.MessagePack.msgBody)
  
  return msgbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessagePack::set_allocated_msgbody(::std::string* msgbody) {
  if (msgbody != NULL) {
    
  } else {
    
  }
  msgbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msgbody);
  // @@protoc_insertion_point(field_set_allocated:channeld.MessagePack.msgBody)
}

// -------------------------------------------------------------------

// ServerForwardMessage

// uint32 clientConnId = 1;
inline void ServerForwardMessage::clear_clientconnid() {
  clientconnid_ = 0u;
}
inline ::google::protobuf::uint32 ServerForwardMessage::clientconnid() const {
  // @@protoc_insertion_point(field_get:channeld.ServerForwardMessage.clientConnId)
  return clientconnid_;
}
inline void ServerForwardMessage::set_clientconnid(::google::protobuf::uint32 value) {
  
  clientconnid_ = value;
  // @@protoc_insertion_point(field_set:channeld.ServerForwardMessage.clientConnId)
}

// bytes payload = 2;
inline void ServerForwardMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerForwardMessage::payload() const {
  // @@protoc_insertion_point(field_get:channeld.ServerForwardMessage.payload)
  return payload_.GetNoArena();
}
inline void ServerForwardMessage::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeld.ServerForwardMessage.payload)
}
#if LANG_CXX11
inline void ServerForwardMessage::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeld.ServerForwardMessage.payload)
}
#endif
inline void ServerForwardMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeld.ServerForwardMessage.payload)
}
inline void ServerForwardMessage::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeld.ServerForwardMessage.payload)
}
inline ::std::string* ServerForwardMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:channeld.ServerForwardMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerForwardMessage::release_payload() {
  // @@protoc_insertion_point(field_release:channeld.ServerForwardMessage.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerForwardMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:channeld.ServerForwardMessage.payload)
}

// -------------------------------------------------------------------

// AuthMessage

// string playerIdentifierToken = 1;
inline void AuthMessage::clear_playeridentifiertoken() {
  playeridentifiertoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthMessage::playeridentifiertoken() const {
  // @@protoc_insertion_point(field_get:channeld.AuthMessage.playerIdentifierToken)
  return playeridentifiertoken_.GetNoArena();
}
inline void AuthMessage::set_playeridentifiertoken(const ::std::string& value) {
  
  playeridentifiertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeld.AuthMessage.playerIdentifierToken)
}
#if LANG_CXX11
inline void AuthMessage::set_playeridentifiertoken(::std::string&& value) {
  
  playeridentifiertoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeld.AuthMessage.playerIdentifierToken)
}
#endif
inline void AuthMessage::set_playeridentifiertoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playeridentifiertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeld.AuthMessage.playerIdentifierToken)
}
inline void AuthMessage::set_playeridentifiertoken(const char* value, size_t size) {
  
  playeridentifiertoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeld.AuthMessage.playerIdentifierToken)
}
inline ::std::string* AuthMessage::mutable_playeridentifiertoken() {
  
  // @@protoc_insertion_point(field_mutable:channeld.AuthMessage.playerIdentifierToken)
  return playeridentifiertoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthMessage::release_playeridentifiertoken() {
  // @@protoc_insertion_point(field_release:channeld.AuthMessage.playerIdentifierToken)
  
  return playeridentifiertoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthMessage::set_allocated_playeridentifiertoken(::std::string* playeridentifiertoken) {
  if (playeridentifiertoken != NULL) {
    
  } else {
    
  }
  playeridentifiertoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playeridentifiertoken);
  // @@protoc_insertion_point(field_set_allocated:channeld.AuthMessage.playerIdentifierToken)
}

// string loginToken = 2;
inline void AuthMessage::clear_logintoken() {
  logintoken_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthMessage::logintoken() const {
  // @@protoc_insertion_point(field_get:channeld.AuthMessage.loginToken)
  return logintoken_.GetNoArena();
}
inline void AuthMessage::set_logintoken(const ::std::string& value) {
  
  logintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeld.AuthMessage.loginToken)
}
#if LANG_CXX11
inline void AuthMessage::set_logintoken(::std::string&& value) {
  
  logintoken_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeld.AuthMessage.loginToken)
}
#endif
inline void AuthMessage::set_logintoken(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeld.AuthMessage.loginToken)
}
inline void AuthMessage::set_logintoken(const char* value, size_t size) {
  
  logintoken_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeld.AuthMessage.loginToken)
}
inline ::std::string* AuthMessage::mutable_logintoken() {
  
  // @@protoc_insertion_point(field_mutable:channeld.AuthMessage.loginToken)
  return logintoken_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthMessage::release_logintoken() {
  // @@protoc_insertion_point(field_release:channeld.AuthMessage.loginToken)
  
  return logintoken_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthMessage::set_allocated_logintoken(::std::string* logintoken) {
  if (logintoken != NULL) {
    
  } else {
    
  }
  logintoken_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logintoken);
  // @@protoc_insertion_point(field_set_allocated:channeld.AuthMessage.loginToken)
}

// -------------------------------------------------------------------

// AuthResultMessage

// .channeld.AuthResultMessage.AuthResult result = 1;
inline void AuthResultMessage::clear_result() {
  result_ = 0;
}
inline ::channeld::AuthResultMessage_AuthResult AuthResultMessage::result() const {
  // @@protoc_insertion_point(field_get:channeld.AuthResultMessage.result)
  return static_cast< ::channeld::AuthResultMessage_AuthResult >(result_);
}
inline void AuthResultMessage::set_result(::channeld::AuthResultMessage_AuthResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:channeld.AuthResultMessage.result)
}

// uint32 connId = 2;
inline void AuthResultMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 AuthResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeld.AuthResultMessage.connId)
  return connid_;
}
inline void AuthResultMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeld.AuthResultMessage.connId)
}

// .channeld.CompressionType compressionType = 3;
inline void AuthResultMessage::clear_compressiontype() {
  compressiontype_ = 0;
}
inline ::channeld::CompressionType AuthResultMessage::compressiontype() const {
  // @@protoc_insertion_point(field_get:channeld.AuthResultMessage.compressionType)
  return static_cast< ::channeld::CompressionType >(compressiontype_);
}
inline void AuthResultMessage::set_compressiontype(::channeld::CompressionType value) {
  
  compressiontype_ = value;
  // @@protoc_insertion_point(field_set:channeld.AuthResultMessage.compressionType)
}

// -------------------------------------------------------------------

// ChannelSubscriptionOptions

// bool CanUpdateData = 1;
inline void ChannelSubscriptionOptions::clear_canupdatedata() {
  canupdatedata_ = false;
}
inline bool ChannelSubscriptionOptions::canupdatedata() const {
  // @@protoc_insertion_point(field_get:channeld.ChannelSubscriptionOptions.CanUpdateData)
  return canupdatedata_;
}
inline void ChannelSubscriptionOptions::set_canupdatedata(bool value) {
  
  canupdatedata_ = value;
  // @@protoc_insertion_point(field_set:channeld.ChannelSubscriptionOptions.CanUpdateData)
}

// repeated string DataFieldMasks = 2;
inline int ChannelSubscriptionOptions::datafieldmasks_size() const {
  return datafieldmasks_.size();
}
inline void ChannelSubscriptionOptions::clear_datafieldmasks() {
  datafieldmasks_.Clear();
}
inline const ::std::string& ChannelSubscriptionOptions::datafieldmasks(int index) const {
  // @@protoc_insertion_point(field_get:channeld.ChannelSubscriptionOptions.DataFieldMasks)
  return datafieldmasks_.Get(index);
}
inline ::std::string* ChannelSubscriptionOptions::mutable_datafieldmasks(int index) {
  // @@protoc_insertion_point(field_mutable:channeld.ChannelSubscriptionOptions.DataFieldMasks)
  return datafieldmasks_.Mutable(index);
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:channeld.ChannelSubscriptionOptions.DataFieldMasks)
  datafieldmasks_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:channeld.ChannelSubscriptionOptions.DataFieldMasks)
  datafieldmasks_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datafieldmasks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channeld.ChannelSubscriptionOptions.DataFieldMasks)
}
inline void ChannelSubscriptionOptions::set_datafieldmasks(int index, const char* value, size_t size) {
  datafieldmasks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channeld.ChannelSubscriptionOptions.DataFieldMasks)
}
inline ::std::string* ChannelSubscriptionOptions::add_datafieldmasks() {
  // @@protoc_insertion_point(field_add_mutable:channeld.ChannelSubscriptionOptions.DataFieldMasks)
  return datafieldmasks_.Add();
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(const ::std::string& value) {
  datafieldmasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channeld.ChannelSubscriptionOptions.DataFieldMasks)
}
#if LANG_CXX11
inline void ChannelSubscriptionOptions::add_datafieldmasks(::std::string&& value) {
  datafieldmasks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:channeld.ChannelSubscriptionOptions.DataFieldMasks)
}
#endif
inline void ChannelSubscriptionOptions::add_datafieldmasks(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  datafieldmasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channeld.ChannelSubscriptionOptions.DataFieldMasks)
}
inline void ChannelSubscriptionOptions::add_datafieldmasks(const char* value, size_t size) {
  datafieldmasks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channeld.ChannelSubscriptionOptions.DataFieldMasks)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChannelSubscriptionOptions::datafieldmasks() const {
  // @@protoc_insertion_point(field_list:channeld.ChannelSubscriptionOptions.DataFieldMasks)
  return datafieldmasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChannelSubscriptionOptions::mutable_datafieldmasks() {
  // @@protoc_insertion_point(field_mutable_list:channeld.ChannelSubscriptionOptions.DataFieldMasks)
  return &datafieldmasks_;
}

// uint32 FanOutIntervalMs = 3;
inline void ChannelSubscriptionOptions::clear_fanoutintervalms() {
  fanoutintervalms_ = 0u;
}
inline ::google::protobuf::uint32 ChannelSubscriptionOptions::fanoutintervalms() const {
  // @@protoc_insertion_point(field_get:channeld.ChannelSubscriptionOptions.FanOutIntervalMs)
  return fanoutintervalms_;
}
inline void ChannelSubscriptionOptions::set_fanoutintervalms(::google::protobuf::uint32 value) {
  
  fanoutintervalms_ = value;
  // @@protoc_insertion_point(field_set:channeld.ChannelSubscriptionOptions.FanOutIntervalMs)
}

// -------------------------------------------------------------------

// ChannelDataMergeOptions

// bool shouldReplaceList = 1;
inline void ChannelDataMergeOptions::clear_shouldreplacelist() {
  shouldreplacelist_ = false;
}
inline bool ChannelDataMergeOptions::shouldreplacelist() const {
  // @@protoc_insertion_point(field_get:channeld.ChannelDataMergeOptions.shouldReplaceList)
  return shouldreplacelist_;
}
inline void ChannelDataMergeOptions::set_shouldreplacelist(bool value) {
  
  shouldreplacelist_ = value;
  // @@protoc_insertion_point(field_set:channeld.ChannelDataMergeOptions.shouldReplaceList)
}

// uint32 listSizeLimit = 2;
inline void ChannelDataMergeOptions::clear_listsizelimit() {
  listsizelimit_ = 0u;
}
inline ::google::protobuf::uint32 ChannelDataMergeOptions::listsizelimit() const {
  // @@protoc_insertion_point(field_get:channeld.ChannelDataMergeOptions.listSizeLimit)
  return listsizelimit_;
}
inline void ChannelDataMergeOptions::set_listsizelimit(::google::protobuf::uint32 value) {
  
  listsizelimit_ = value;
  // @@protoc_insertion_point(field_set:channeld.ChannelDataMergeOptions.listSizeLimit)
}

// bool truncateTop = 3;
inline void ChannelDataMergeOptions::clear_truncatetop() {
  truncatetop_ = false;
}
inline bool ChannelDataMergeOptions::truncatetop() const {
  // @@protoc_insertion_point(field_get:channeld.ChannelDataMergeOptions.truncateTop)
  return truncatetop_;
}
inline void ChannelDataMergeOptions::set_truncatetop(bool value) {
  
  truncatetop_ = value;
  // @@protoc_insertion_point(field_set:channeld.ChannelDataMergeOptions.truncateTop)
}

// bool shouldCheckRemovableMapField = 4;
inline void ChannelDataMergeOptions::clear_shouldcheckremovablemapfield() {
  shouldcheckremovablemapfield_ = false;
}
inline bool ChannelDataMergeOptions::shouldcheckremovablemapfield() const {
  // @@protoc_insertion_point(field_get:channeld.ChannelDataMergeOptions.shouldCheckRemovableMapField)
  return shouldcheckremovablemapfield_;
}
inline void ChannelDataMergeOptions::set_shouldcheckremovablemapfield(bool value) {
  
  shouldcheckremovablemapfield_ = value;
  // @@protoc_insertion_point(field_set:channeld.ChannelDataMergeOptions.shouldCheckRemovableMapField)
}

// -------------------------------------------------------------------

// CreateChannelMessage

// .channeld.ChannelType channelType = 1;
inline void CreateChannelMessage::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeld::ChannelType CreateChannelMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeld.CreateChannelMessage.channelType)
  return static_cast< ::channeld::ChannelType >(channeltype_);
}
inline void CreateChannelMessage::set_channeltype(::channeld::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeld.CreateChannelMessage.channelType)
}

// string metadata = 2;
inline void CreateChannelMessage::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateChannelMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeld.CreateChannelMessage.metadata)
  return metadata_.GetNoArena();
}
inline void CreateChannelMessage::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeld.CreateChannelMessage.metadata)
}
#if LANG_CXX11
inline void CreateChannelMessage::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeld.CreateChannelMessage.metadata)
}
#endif
inline void CreateChannelMessage::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeld.CreateChannelMessage.metadata)
}
inline void CreateChannelMessage::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeld.CreateChannelMessage.metadata)
}
inline ::std::string* CreateChannelMessage::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:channeld.CreateChannelMessage.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChannelMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeld.CreateChannelMessage.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChannelMessage::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:channeld.CreateChannelMessage.metadata)
}

// .channeld.ChannelSubscriptionOptions subOptions = 3;
inline bool CreateChannelMessage::has_suboptions() const {
  return this != internal_default_instance() && suboptions_ != NULL;
}
inline void CreateChannelMessage::clear_suboptions() {
  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
}
inline const ::channeld::ChannelSubscriptionOptions& CreateChannelMessage::suboptions() const {
  const ::channeld::ChannelSubscriptionOptions* p = suboptions_;
  // @@protoc_insertion_point(field_get:channeld.CreateChannelMessage.subOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::channeld::ChannelSubscriptionOptions*>(
      &::channeld::_ChannelSubscriptionOptions_default_instance_);
}
inline ::channeld::ChannelSubscriptionOptions* CreateChannelMessage::release_suboptions() {
  // @@protoc_insertion_point(field_release:channeld.CreateChannelMessage.subOptions)
  
  ::channeld::ChannelSubscriptionOptions* temp = suboptions_;
  suboptions_ = NULL;
  return temp;
}
inline ::channeld::ChannelSubscriptionOptions* CreateChannelMessage::mutable_suboptions() {
  
  if (suboptions_ == NULL) {
    suboptions_ = new ::channeld::ChannelSubscriptionOptions;
  }
  // @@protoc_insertion_point(field_mutable:channeld.CreateChannelMessage.subOptions)
  return suboptions_;
}
inline void CreateChannelMessage::set_allocated_suboptions(::channeld::ChannelSubscriptionOptions* suboptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete suboptions_;
  }
  if (suboptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      suboptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeld.CreateChannelMessage.subOptions)
}

// .google.protobuf.Any data = 4;
inline bool CreateChannelMessage::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Any& CreateChannelMessage::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:channeld.CreateChannelMessage.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* CreateChannelMessage::release_data() {
  // @@protoc_insertion_point(field_release:channeld.CreateChannelMessage.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* CreateChannelMessage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:channeld.CreateChannelMessage.data)
  return data_;
}
inline void CreateChannelMessage::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeld.CreateChannelMessage.data)
}

// .channeld.ChannelDataMergeOptions mergeOptions = 5;
inline bool CreateChannelMessage::has_mergeoptions() const {
  return this != internal_default_instance() && mergeoptions_ != NULL;
}
inline void CreateChannelMessage::clear_mergeoptions() {
  if (GetArenaNoVirtual() == NULL && mergeoptions_ != NULL) {
    delete mergeoptions_;
  }
  mergeoptions_ = NULL;
}
inline const ::channeld::ChannelDataMergeOptions& CreateChannelMessage::mergeoptions() const {
  const ::channeld::ChannelDataMergeOptions* p = mergeoptions_;
  // @@protoc_insertion_point(field_get:channeld.CreateChannelMessage.mergeOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::channeld::ChannelDataMergeOptions*>(
      &::channeld::_ChannelDataMergeOptions_default_instance_);
}
inline ::channeld::ChannelDataMergeOptions* CreateChannelMessage::release_mergeoptions() {
  // @@protoc_insertion_point(field_release:channeld.CreateChannelMessage.mergeOptions)
  
  ::channeld::ChannelDataMergeOptions* temp = mergeoptions_;
  mergeoptions_ = NULL;
  return temp;
}
inline ::channeld::ChannelDataMergeOptions* CreateChannelMessage::mutable_mergeoptions() {
  
  if (mergeoptions_ == NULL) {
    mergeoptions_ = new ::channeld::ChannelDataMergeOptions;
  }
  // @@protoc_insertion_point(field_mutable:channeld.CreateChannelMessage.mergeOptions)
  return mergeoptions_;
}
inline void CreateChannelMessage::set_allocated_mergeoptions(::channeld::ChannelDataMergeOptions* mergeoptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete mergeoptions_;
  }
  if (mergeoptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      mergeoptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, mergeoptions, submessage_arena);
    }
    
  } else {
    
  }
  mergeoptions_ = mergeoptions;
  // @@protoc_insertion_point(field_set_allocated:channeld.CreateChannelMessage.mergeOptions)
}

// -------------------------------------------------------------------

// CreateChannelResultMessage

// .channeld.ChannelType channelType = 1;
inline void CreateChannelResultMessage::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeld::ChannelType CreateChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeld.CreateChannelResultMessage.channelType)
  return static_cast< ::channeld::ChannelType >(channeltype_);
}
inline void CreateChannelResultMessage::set_channeltype(::channeld::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeld.CreateChannelResultMessage.channelType)
}

// string metadata = 2;
inline void CreateChannelResultMessage::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateChannelResultMessage::metadata() const {
  // @@protoc_insertion_point(field_get:channeld.CreateChannelResultMessage.metadata)
  return metadata_.GetNoArena();
}
inline void CreateChannelResultMessage::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeld.CreateChannelResultMessage.metadata)
}
#if LANG_CXX11
inline void CreateChannelResultMessage::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeld.CreateChannelResultMessage.metadata)
}
#endif
inline void CreateChannelResultMessage::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeld.CreateChannelResultMessage.metadata)
}
inline void CreateChannelResultMessage::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeld.CreateChannelResultMessage.metadata)
}
inline ::std::string* CreateChannelResultMessage::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:channeld.CreateChannelResultMessage.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateChannelResultMessage::release_metadata() {
  // @@protoc_insertion_point(field_release:channeld.CreateChannelResultMessage.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateChannelResultMessage::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:channeld.CreateChannelResultMessage.metadata)
}

// uint32 ownerConnId = 3;
inline void CreateChannelResultMessage::clear_ownerconnid() {
  ownerconnid_ = 0u;
}
inline ::google::protobuf::uint32 CreateChannelResultMessage::ownerconnid() const {
  // @@protoc_insertion_point(field_get:channeld.CreateChannelResultMessage.ownerConnId)
  return ownerconnid_;
}
inline void CreateChannelResultMessage::set_ownerconnid(::google::protobuf::uint32 value) {
  
  ownerconnid_ = value;
  // @@protoc_insertion_point(field_set:channeld.CreateChannelResultMessage.ownerConnId)
}

// -------------------------------------------------------------------

// RemoveChannelMessage

// uint32 channelId = 1;
inline void RemoveChannelMessage::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 RemoveChannelMessage::channelid() const {
  // @@protoc_insertion_point(field_get:channeld.RemoveChannelMessage.channelId)
  return channelid_;
}
inline void RemoveChannelMessage::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeld.RemoveChannelMessage.channelId)
}

// -------------------------------------------------------------------

// ListChannelMessage

// .channeld.ChannelType typeFilter = 1;
inline void ListChannelMessage::clear_typefilter() {
  typefilter_ = 0;
}
inline ::channeld::ChannelType ListChannelMessage::typefilter() const {
  // @@protoc_insertion_point(field_get:channeld.ListChannelMessage.typeFilter)
  return static_cast< ::channeld::ChannelType >(typefilter_);
}
inline void ListChannelMessage::set_typefilter(::channeld::ChannelType value) {
  
  typefilter_ = value;
  // @@protoc_insertion_point(field_set:channeld.ListChannelMessage.typeFilter)
}

// repeated string metadataFilters = 2;
inline int ListChannelMessage::metadatafilters_size() const {
  return metadatafilters_.size();
}
inline void ListChannelMessage::clear_metadatafilters() {
  metadatafilters_.Clear();
}
inline const ::std::string& ListChannelMessage::metadatafilters(int index) const {
  // @@protoc_insertion_point(field_get:channeld.ListChannelMessage.metadataFilters)
  return metadatafilters_.Get(index);
}
inline ::std::string* ListChannelMessage::mutable_metadatafilters(int index) {
  // @@protoc_insertion_point(field_mutable:channeld.ListChannelMessage.metadataFilters)
  return metadatafilters_.Mutable(index);
}
inline void ListChannelMessage::set_metadatafilters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:channeld.ListChannelMessage.metadataFilters)
  metadatafilters_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListChannelMessage::set_metadatafilters(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:channeld.ListChannelMessage.metadataFilters)
  metadatafilters_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListChannelMessage::set_metadatafilters(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  metadatafilters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:channeld.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::set_metadatafilters(int index, const char* value, size_t size) {
  metadatafilters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:channeld.ListChannelMessage.metadataFilters)
}
inline ::std::string* ListChannelMessage::add_metadatafilters() {
  // @@protoc_insertion_point(field_add_mutable:channeld.ListChannelMessage.metadataFilters)
  return metadatafilters_.Add();
}
inline void ListChannelMessage::add_metadatafilters(const ::std::string& value) {
  metadatafilters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:channeld.ListChannelMessage.metadataFilters)
}
#if LANG_CXX11
inline void ListChannelMessage::add_metadatafilters(::std::string&& value) {
  metadatafilters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:channeld.ListChannelMessage.metadataFilters)
}
#endif
inline void ListChannelMessage::add_metadatafilters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  metadatafilters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:channeld.ListChannelMessage.metadataFilters)
}
inline void ListChannelMessage::add_metadatafilters(const char* value, size_t size) {
  metadatafilters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:channeld.ListChannelMessage.metadataFilters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListChannelMessage::metadatafilters() const {
  // @@protoc_insertion_point(field_list:channeld.ListChannelMessage.metadataFilters)
  return metadatafilters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListChannelMessage::mutable_metadatafilters() {
  // @@protoc_insertion_point(field_mutable_list:channeld.ListChannelMessage.metadataFilters)
  return &metadatafilters_;
}

// -------------------------------------------------------------------

// ListChannelResultMessage_ChannelInfo

// uint32 channelId = 1;
inline void ListChannelResultMessage_ChannelInfo::clear_channelid() {
  channelid_ = 0u;
}
inline ::google::protobuf::uint32 ListChannelResultMessage_ChannelInfo::channelid() const {
  // @@protoc_insertion_point(field_get:channeld.ListChannelResultMessage.ChannelInfo.channelId)
  return channelid_;
}
inline void ListChannelResultMessage_ChannelInfo::set_channelid(::google::protobuf::uint32 value) {
  
  channelid_ = value;
  // @@protoc_insertion_point(field_set:channeld.ListChannelResultMessage.ChannelInfo.channelId)
}

// .channeld.ChannelType channelType = 2;
inline void ListChannelResultMessage_ChannelInfo::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeld::ChannelType ListChannelResultMessage_ChannelInfo::channeltype() const {
  // @@protoc_insertion_point(field_get:channeld.ListChannelResultMessage.ChannelInfo.channelType)
  return static_cast< ::channeld::ChannelType >(channeltype_);
}
inline void ListChannelResultMessage_ChannelInfo::set_channeltype(::channeld::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeld.ListChannelResultMessage.ChannelInfo.channelType)
}

// string metadata = 3;
inline void ListChannelResultMessage_ChannelInfo::clear_metadata() {
  metadata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListChannelResultMessage_ChannelInfo::metadata() const {
  // @@protoc_insertion_point(field_get:channeld.ListChannelResultMessage.ChannelInfo.metadata)
  return metadata_.GetNoArena();
}
inline void ListChannelResultMessage_ChannelInfo::set_metadata(const ::std::string& value) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:channeld.ListChannelResultMessage.ChannelInfo.metadata)
}
#if LANG_CXX11
inline void ListChannelResultMessage_ChannelInfo::set_metadata(::std::string&& value) {
  
  metadata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:channeld.ListChannelResultMessage.ChannelInfo.metadata)
}
#endif
inline void ListChannelResultMessage_ChannelInfo::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:channeld.ListChannelResultMessage.ChannelInfo.metadata)
}
inline void ListChannelResultMessage_ChannelInfo::set_metadata(const char* value, size_t size) {
  
  metadata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:channeld.ListChannelResultMessage.ChannelInfo.metadata)
}
inline ::std::string* ListChannelResultMessage_ChannelInfo::mutable_metadata() {
  
  // @@protoc_insertion_point(field_mutable:channeld.ListChannelResultMessage.ChannelInfo.metadata)
  return metadata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListChannelResultMessage_ChannelInfo::release_metadata() {
  // @@protoc_insertion_point(field_release:channeld.ListChannelResultMessage.ChannelInfo.metadata)
  
  return metadata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListChannelResultMessage_ChannelInfo::set_allocated_metadata(::std::string* metadata) {
  if (metadata != NULL) {
    
  } else {
    
  }
  metadata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), metadata);
  // @@protoc_insertion_point(field_set_allocated:channeld.ListChannelResultMessage.ChannelInfo.metadata)
}

// -------------------------------------------------------------------

// ListChannelResultMessage

// repeated .channeld.ListChannelResultMessage.ChannelInfo channels = 1;
inline int ListChannelResultMessage::channels_size() const {
  return channels_.size();
}
inline void ListChannelResultMessage::clear_channels() {
  channels_.Clear();
}
inline const ::channeld::ListChannelResultMessage_ChannelInfo& ListChannelResultMessage::channels(int index) const {
  // @@protoc_insertion_point(field_get:channeld.ListChannelResultMessage.channels)
  return channels_.Get(index);
}
inline ::channeld::ListChannelResultMessage_ChannelInfo* ListChannelResultMessage::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:channeld.ListChannelResultMessage.channels)
  return channels_.Mutable(index);
}
inline ::channeld::ListChannelResultMessage_ChannelInfo* ListChannelResultMessage::add_channels() {
  // @@protoc_insertion_point(field_add:channeld.ListChannelResultMessage.channels)
  return channels_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::channeld::ListChannelResultMessage_ChannelInfo >*
ListChannelResultMessage::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:channeld.ListChannelResultMessage.channels)
  return &channels_;
}
inline const ::google::protobuf::RepeatedPtrField< ::channeld::ListChannelResultMessage_ChannelInfo >&
ListChannelResultMessage::channels() const {
  // @@protoc_insertion_point(field_list:channeld.ListChannelResultMessage.channels)
  return channels_;
}

// -------------------------------------------------------------------

// SubscribedToChannelMessage

// uint32 connId = 1;
inline void SubscribedToChannelMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 SubscribedToChannelMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeld.SubscribedToChannelMessage.connId)
  return connid_;
}
inline void SubscribedToChannelMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeld.SubscribedToChannelMessage.connId)
}

// .channeld.ChannelSubscriptionOptions subOptions = 2;
inline bool SubscribedToChannelMessage::has_suboptions() const {
  return this != internal_default_instance() && suboptions_ != NULL;
}
inline void SubscribedToChannelMessage::clear_suboptions() {
  if (GetArenaNoVirtual() == NULL && suboptions_ != NULL) {
    delete suboptions_;
  }
  suboptions_ = NULL;
}
inline const ::channeld::ChannelSubscriptionOptions& SubscribedToChannelMessage::suboptions() const {
  const ::channeld::ChannelSubscriptionOptions* p = suboptions_;
  // @@protoc_insertion_point(field_get:channeld.SubscribedToChannelMessage.subOptions)
  return p != NULL ? *p : *reinterpret_cast<const ::channeld::ChannelSubscriptionOptions*>(
      &::channeld::_ChannelSubscriptionOptions_default_instance_);
}
inline ::channeld::ChannelSubscriptionOptions* SubscribedToChannelMessage::release_suboptions() {
  // @@protoc_insertion_point(field_release:channeld.SubscribedToChannelMessage.subOptions)
  
  ::channeld::ChannelSubscriptionOptions* temp = suboptions_;
  suboptions_ = NULL;
  return temp;
}
inline ::channeld::ChannelSubscriptionOptions* SubscribedToChannelMessage::mutable_suboptions() {
  
  if (suboptions_ == NULL) {
    suboptions_ = new ::channeld::ChannelSubscriptionOptions;
  }
  // @@protoc_insertion_point(field_mutable:channeld.SubscribedToChannelMessage.subOptions)
  return suboptions_;
}
inline void SubscribedToChannelMessage::set_allocated_suboptions(::channeld::ChannelSubscriptionOptions* suboptions) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete suboptions_;
  }
  if (suboptions) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      suboptions = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, suboptions, submessage_arena);
    }
    
  } else {
    
  }
  suboptions_ = suboptions;
  // @@protoc_insertion_point(field_set_allocated:channeld.SubscribedToChannelMessage.subOptions)
}

// -------------------------------------------------------------------

// SubscribedToChannelResultMessage

// uint32 connId = 1;
inline void SubscribedToChannelResultMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 SubscribedToChannelResultMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeld.SubscribedToChannelResultMessage.connId)
  return connid_;
}
inline void SubscribedToChannelResultMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeld.SubscribedToChannelResultMessage.connId)
}

// .channeld.ChannelType channelType = 2;
inline void SubscribedToChannelResultMessage::clear_channeltype() {
  channeltype_ = 0;
}
inline ::channeld::ChannelType SubscribedToChannelResultMessage::channeltype() const {
  // @@protoc_insertion_point(field_get:channeld.SubscribedToChannelResultMessage.channelType)
  return static_cast< ::channeld::ChannelType >(channeltype_);
}
inline void SubscribedToChannelResultMessage::set_channeltype(::channeld::ChannelType value) {
  
  channeltype_ = value;
  // @@protoc_insertion_point(field_set:channeld.SubscribedToChannelResultMessage.channelType)
}

// -------------------------------------------------------------------

// UnsubscribedFromChannelMessage

// uint32 connId = 1;
inline void UnsubscribedFromChannelMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 UnsubscribedFromChannelMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeld.UnsubscribedFromChannelMessage.connId)
  return connid_;
}
inline void UnsubscribedFromChannelMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeld.UnsubscribedFromChannelMessage.connId)
}

// -------------------------------------------------------------------

// ChannelDataUpdateMessage

// .google.protobuf.Any data = 1;
inline bool ChannelDataUpdateMessage::has_data() const {
  return this != internal_default_instance() && data_ != NULL;
}
inline const ::google::protobuf::Any& ChannelDataUpdateMessage::data() const {
  const ::google::protobuf::Any* p = data_;
  // @@protoc_insertion_point(field_get:channeld.ChannelDataUpdateMessage.data)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* ChannelDataUpdateMessage::release_data() {
  // @@protoc_insertion_point(field_release:channeld.ChannelDataUpdateMessage.data)
  
  ::google::protobuf::Any* temp = data_;
  data_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* ChannelDataUpdateMessage::mutable_data() {
  
  if (data_ == NULL) {
    data_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:channeld.ChannelDataUpdateMessage.data)
  return data_;
}
inline void ChannelDataUpdateMessage::set_allocated_data(::google::protobuf::Any* data) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(data_);
  }
  if (data) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      data = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:channeld.ChannelDataUpdateMessage.data)
}

// -------------------------------------------------------------------

// DisconnectMessage

// uint32 connId = 1;
inline void DisconnectMessage::clear_connid() {
  connid_ = 0u;
}
inline ::google::protobuf::uint32 DisconnectMessage::connid() const {
  // @@protoc_insertion_point(field_get:channeld.DisconnectMessage.connId)
  return connid_;
}
inline void DisconnectMessage::set_connid(::google::protobuf::uint32 value) {
  
  connid_ = value;
  // @@protoc_insertion_point(field_set:channeld.DisconnectMessage.connId)
}

// -------------------------------------------------------------------

// Location

// double x = 1;
inline void Location::clear_x() {
  x_ = 0;
}
inline double Location::x() const {
  // @@protoc_insertion_point(field_get:channeld.Location.x)
  return x_;
}
inline void Location::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:channeld.Location.x)
}

// double y = 2;
inline void Location::clear_y() {
  y_ = 0;
}
inline double Location::y() const {
  // @@protoc_insertion_point(field_get:channeld.Location.y)
  return y_;
}
inline void Location::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:channeld.Location.y)
}

// double z = 3;
inline void Location::clear_z() {
  z_ = 0;
}
inline double Location::z() const {
  // @@protoc_insertion_point(field_get:channeld.Location.z)
  return z_;
}
inline void Location::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:channeld.Location.z)
}

// -------------------------------------------------------------------

// SpatialEntityInfo

// .channeld.Location loc = 1;
inline bool SpatialEntityInfo::has_loc() const {
  return this != internal_default_instance() && loc_ != NULL;
}
inline void SpatialEntityInfo::clear_loc() {
  if (GetArenaNoVirtual() == NULL && loc_ != NULL) {
    delete loc_;
  }
  loc_ = NULL;
}
inline const ::channeld::Location& SpatialEntityInfo::loc() const {
  const ::channeld::Location* p = loc_;
  // @@protoc_insertion_point(field_get:channeld.SpatialEntityInfo.loc)
  return p != NULL ? *p : *reinterpret_cast<const ::channeld::Location*>(
      &::channeld::_Location_default_instance_);
}
inline ::channeld::Location* SpatialEntityInfo::release_loc() {
  // @@protoc_insertion_point(field_release:channeld.SpatialEntityInfo.loc)
  
  ::channeld::Location* temp = loc_;
  loc_ = NULL;
  return temp;
}
inline ::channeld::Location* SpatialEntityInfo::mutable_loc() {
  
  if (loc_ == NULL) {
    loc_ = new ::channeld::Location;
  }
  // @@protoc_insertion_point(field_mutable:channeld.SpatialEntityInfo.loc)
  return loc_;
}
inline void SpatialEntityInfo::set_allocated_loc(::channeld::Location* loc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete loc_;
  }
  if (loc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      loc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, loc, submessage_arena);
    }
    
  } else {
    
  }
  loc_ = loc;
  // @@protoc_insertion_point(field_set_allocated:channeld.SpatialEntityInfo.loc)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SpatialChannelDataMessage

// map<uint32, .channeld.SpatialEntityInfo> entities = 1;
inline int SpatialChannelDataMessage::entities_size() const {
  return entities_.size();
}
inline void SpatialChannelDataMessage::clear_entities() {
  entities_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::channeld::SpatialEntityInfo >&
SpatialChannelDataMessage::entities() const {
  // @@protoc_insertion_point(field_map:channeld.SpatialChannelDataMessage.entities)
  return entities_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::channeld::SpatialEntityInfo >*
SpatialChannelDataMessage::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_map:channeld.SpatialChannelDataMessage.entities)
  return entities_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channeld

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::channeld::AuthResultMessage_AuthResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeld::AuthResultMessage_AuthResult>() {
  return ::channeld::AuthResultMessage_AuthResult_descriptor();
}
template <> struct is_proto_enum< ::channeld::BroadcastType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeld::BroadcastType>() {
  return ::channeld::BroadcastType_descriptor();
}
template <> struct is_proto_enum< ::channeld::ChannelType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeld::ChannelType>() {
  return ::channeld::ChannelType_descriptor();
}
template <> struct is_proto_enum< ::channeld::MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeld::MessageType>() {
  return ::channeld::MessageType_descriptor();
}
template <> struct is_proto_enum< ::channeld::CompressionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::channeld::CompressionType>() {
  return ::channeld::CompressionType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Channeld_2eproto__INCLUDED
